{"mappings":"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","sources":["<anon>","src/assets/js/scripts.js"],"sourcesContent":["// DOM Elements\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const initElements = {\n        darkModeToggle: document.getElementById('dark-mode-toggle'),\n        mobileMenuToggle: document.getElementById('menu-toggle'),\n        mobileNav: document.getElementById('nav-mobile'),\n        searchInput: document.getElementById('search-input'),\n        contactForm: document.getElementById('contactForm'),\n        messageBox: document.getElementById('message-box'),\n        messageText: document.getElementById('messageText')\n    };\n    // Theme Management\n    const themeManager = {\n        enableDarkMode: ()=>{\n            document.body.classList.add('dark-mode');\n            initElements.darkModeToggle.classList.replace('fa-moon', 'fa-sun');\n            localStorage.setItem('theme', 'dark');\n        },\n        disableDarkMode: ()=>{\n            document.body.classList.remove('dark-mode');\n            initElements.darkModeToggle.classList.replace('fa-sun', 'fa-moon');\n            localStorage.setItem('theme', 'light');\n        },\n        initTheme: ()=>{\n            if (localStorage.getItem('theme') === 'dark') themeManager.enableDarkMode();\n            else themeManager.disableDarkMode();\n        }\n    };\n    // Mobile Menu Management\n    const mobileMenuManager = {\n        toggleMenu: ()=>{\n            initElements.mobileNav.classList.toggle('active');\n            initElements.mobileMenuToggle.classList.toggle('fa-bars');\n            initElements.mobileMenuToggle.classList.toggle('fa-times');\n        },\n        closeMenu: ()=>{\n            initElements.mobileNav.classList.remove('active');\n            initElements.mobileMenuToggle.classList.replace('fa-times', 'fa-bars');\n        }\n    };\n    // Form Validation\n    const formValidator = {\n        validateInput: (input)=>{\n            const parentGroup = input.closest('.input-group');\n            if (!parentGroup) return true;\n            let isValid = true;\n            // Required field validation\n            if (input.required && input.value.trim() === '') isValid = false;\n            // Email validation\n            if (input.type === 'email' && input.value.trim() !== '') {\n                const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                if (!emailPattern.test(input.value.trim())) isValid = false;\n            }\n            // Phone validation\n            if (input.id === 'phone' && input.value.trim() !== '') {\n                const phonePattern = /^[0-9+\\s()-]*$/;\n                if (!phonePattern.test(input.value.trim())) isValid = false;\n            }\n            parentGroup.classList.toggle('valid', isValid);\n            parentGroup.classList.toggle('invalid', !isValid);\n            return isValid;\n        }\n    };\n    // Message Box Management\n    const messageBoxManager = {\n        show: (message)=>{\n            initElements.messageText.textContent = message;\n            initElements.messageBox.classList.add('show');\n        },\n        hide: ()=>{\n            initElements.messageBox.classList.remove('show');\n        }\n    };\n    // Event Listeners\n    const initializeEventListeners = ()=>{\n        // Dark Mode Toggle\n        initElements.darkModeToggle.addEventListener('click', ()=>{\n            if (document.body.classList.contains('dark-mode')) themeManager.disableDarkMode();\n            else themeManager.enableDarkMode();\n        });\n        // Mobile Menu\n        initElements.mobileMenuToggle.addEventListener('click', mobileMenuManager.toggleMenu);\n        initElements.mobileNav.querySelectorAll('a').forEach((link)=>{\n            link.addEventListener('click', mobileMenuManager.closeMenu);\n        });\n        // Contact Form\n        if (initElements.contactForm) {\n            initElements.contactForm.querySelectorAll('input, textarea').forEach((input)=>{\n                input.addEventListener('blur', ()=>formValidator.validateInput(input));\n            });\n            initElements.contactForm.addEventListener('submit', (event)=>{\n                event.preventDefault();\n                let allValid = true;\n                initElements.contactForm.querySelectorAll('input, textarea').forEach((input)=>{\n                    if (!formValidator.validateInput(input)) allValid = false;\n                });\n                if (allValid) {\n                    messageBoxManager.show('Thank you for your message! We will get back to you soon.');\n                    initElements.contactForm.reset();\n                    initElements.contactForm.querySelectorAll('.input-group').forEach((group)=>{\n                        group.classList.remove('valid', 'invalid');\n                    });\n                } else messageBoxManager.show('Please fill in all required fields and correct any errors.');\n            });\n        }\n    };\n    // Initialize\n    themeManager.initTheme();\n    initializeEventListeners();\n    // Make messageBoxManager.hide globally available for onclick handlers\n    window.hideMessageBox = messageBoxManager.hide;\n});\n\n//# sourceMappingURL=step8up-week3-website.67ad0c63.js.map\n","// DOM Elements\ndocument.addEventListener('DOMContentLoaded', () => {\n  const initElements = {\n    darkModeToggle: document.getElementById('dark-mode-toggle'),\n    mobileMenuToggle: document.getElementById('menu-toggle'),\n    mobileNav: document.getElementById('nav-mobile'),\n    searchInput: document.getElementById('search-input'),\n    contactForm: document.getElementById('contactForm'),\n    messageBox: document.getElementById('message-box'),\n    messageText: document.getElementById('messageText')\n  };\n\n  // Theme Management\n  const themeManager = {\n    enableDarkMode: () => {\n      document.body.classList.add('dark-mode');\n      initElements.darkModeToggle.classList.replace('fa-moon', 'fa-sun');\n      localStorage.setItem('theme', 'dark');\n    },\n    disableDarkMode: () => {\n      document.body.classList.remove('dark-mode');\n      initElements.darkModeToggle.classList.replace('fa-sun', 'fa-moon');\n      localStorage.setItem('theme', 'light');\n    },\n    initTheme: () => {\n      if (localStorage.getItem('theme') === 'dark') {\n        themeManager.enableDarkMode();\n      } else {\n        themeManager.disableDarkMode();\n      }\n    }\n  };\n\n  // Mobile Menu Management\n  const mobileMenuManager = {\n    toggleMenu: () => {\n      initElements.mobileNav.classList.toggle('active');\n      initElements.mobileMenuToggle.classList.toggle('fa-bars');\n      initElements.mobileMenuToggle.classList.toggle('fa-times');\n    },\n    closeMenu: () => {\n      initElements.mobileNav.classList.remove('active');\n      initElements.mobileMenuToggle.classList.replace('fa-times', 'fa-bars');\n    }\n  };\n\n  // Form Validation\n  const formValidator = {\n    validateInput: (input) => {\n      const parentGroup = input.closest('.input-group');\n      if (!parentGroup) return true;\n\n      let isValid = true;\n\n      // Required field validation\n      if (input.required && input.value.trim() === '') {\n        isValid = false;\n      }\n\n      // Email validation\n      if (input.type === 'email' && input.value.trim() !== '') {\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailPattern.test(input.value.trim())) {\n          isValid = false;\n        }\n      }\n\n      // Phone validation\n      if (input.id === 'phone' && input.value.trim() !== '') {\n        const phonePattern = /^[0-9+\\s()-]*$/;\n        if (!phonePattern.test(input.value.trim())) {\n          isValid = false;\n        }\n      }\n\n      parentGroup.classList.toggle('valid', isValid);\n      parentGroup.classList.toggle('invalid', !isValid);\n      return isValid;\n    }\n  };\n\n  // Message Box Management\n  const messageBoxManager = {\n    show: (message) => {\n      initElements.messageText.textContent = message;\n      initElements.messageBox.classList.add('show');\n    },\n    hide: () => {\n      initElements.messageBox.classList.remove('show');\n    }\n  };\n\n  // Event Listeners\n  const initializeEventListeners = () => {\n    // Dark Mode Toggle\n    initElements.darkModeToggle.addEventListener('click', () => {\n      if (document.body.classList.contains('dark-mode')) {\n        themeManager.disableDarkMode();\n      } else {\n        themeManager.enableDarkMode();\n      }\n    });\n\n    // Mobile Menu\n    initElements.mobileMenuToggle.addEventListener('click', mobileMenuManager.toggleMenu);\n    initElements.mobileNav.querySelectorAll('a').forEach(link => {\n      link.addEventListener('click', mobileMenuManager.closeMenu);\n    });\n\n    // Contact Form\n    if (initElements.contactForm) {\n      initElements.contactForm.querySelectorAll('input, textarea').forEach(input => {\n        input.addEventListener('blur', () => formValidator.validateInput(input));\n      });\n\n      initElements.contactForm.addEventListener('submit', (event) => {\n        event.preventDefault();\n        let allValid = true;\n\n        initElements.contactForm.querySelectorAll('input, textarea').forEach(input => {\n          if (!formValidator.validateInput(input)) {\n            allValid = false;\n          }\n        });\n\n        if (allValid) {\n          messageBoxManager.show('Thank you for your message! We will get back to you soon.');\n          initElements.contactForm.reset();\n          initElements.contactForm.querySelectorAll('.input-group').forEach(group => {\n            group.classList.remove('valid', 'invalid');\n          });\n        } else {\n          messageBoxManager.show('Please fill in all required fields and correct any errors.');\n        }\n      });\n    }\n  };\n\n  // Initialize\n  themeManager.initTheme();\n  initializeEventListeners();\n\n  // Make messageBoxManager.hide globally available for onclick handlers\n  window.hideMessageBox = messageBoxManager.hide;\n});\n"],"names":["document","addEventListener","initElements","darkModeToggle","getElementById","mobileMenuToggle","mobileNav","searchInput","contactForm","messageBox","messageText","themeManager","enableDarkMode","body","classList","add","replace","localStorage","setItem","disableDarkMode","remove","initTheme","getItem","mobileMenuManager","toggleMenu","toggle","closeMenu","formValidator","validateInput","input","parentGroup","closest","isValid","required","value","trim","type","emailPattern","test","id","phonePattern","messageBoxManager","show","message","textContent","hide","contains","querySelectorAll","forEach","link","event","preventDefault","allValid","reset","group","window","hideMessageBox"],"version":3,"file":"step8up-week3-website.67ad0c63.js.map"}